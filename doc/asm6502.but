\cfg{chapter}{}
\cfg{text-chapter-numeric}{true}
\cfg{text-chapter-suffix}{ }
 
\title ASM6502 Assembler Manual

\copyright Copyright 2022-2023 by Bernd Boeckmann

\versionid \date


\C{}Where to get

Latest source and binaries may be found at:

\b https://github.com/boeckmann/asm6502

\b https://codeberg.org/boeckmann/asm6502

Binaries are provided for Windows, DOS, and OS/2. A Unix make file is provided which should be easily adaptable to any C89 conformant C compiler.


\C{intro}Introduction

ASM6502 is a small two-pass assembler for the MOS Technology 6502 microprocessor used in many home computers of the 8-bit era. It consists of under 3K lines of C code and can be built with compilers conformant to the C89 standard.

ASM6502 implements some advanced features, like local labels, the ability to produce listing files, and the optimization of opcodes. It is able to produce byte-exact replicas of the Commodore C64 Kernal and BASIC ROMs. The one big feature missing is macro support.

The assembler outputs plain binary files.

The following listing contains a small sample program. It is the classic hello world for the Commodore C64. To assemble it, invoke the assembler with the source, output, and listing files as arguments:

\cw{asm6502 helloc64.a65 -o helloc64.prg -l helloc64.lst}

\c  1: ; C64 Hello World
\c  2:
\c  3: LOAD_ADDR = $0801
\c  4:
\c  5:       .word LOAD_ADDR
\c  6:       .org  LOAD_ADDR
\c  7:
\c  8: CHROUT = $FFD2
\c  9: SYS    = $9E
\c 10:
\c 11: basic_upstart:
\c 12:       .word @end, 10
\c 13:       .byte SYS, " 2062",0
\c 14: @end  .word 0
\c 15:
\c 16: start:
\c 17:       ldx #0
\c 18: @l    lda hello@msg,x
\c 19:       jsr CHROUT
\c 20:       inx
\c 21:       cpx #hello@len
\c 22:       bne @l
\c 23:       rts
\c 24:
\c 25: hello:
\c 26:   @msg .byte "HELLO, WORLD!", CR, LF
\c 27:   @len = @ - @msg
\c 28:
\c 29: CR = 13
\c 30: LF = %1010


\C{concepts}Concepts and Terminology

The task of an assembler is to translate an \e{assembler source} containing human readable \e{instructions} to a \e{binary representation} the processor understands. This binary representation is called \e{machine code}. There is a one-to-one mapping between the human readable instructions contained in the assembler source and the generated machine code.

Each instruction a processor understands is given a name, called \e{mnemonic}. This name is chosen so that it describes to the programmer what the instruction does. Every instruction is also assigned a numeric value, called the operation code or \e{opcode}. This is what gets written by the assembler as machine code to an output file. The opcode is interpreted by the the processor to decide what to do.

Beside the instruction itself, additional information may be required to process it. The additional information is provided in the source by one or more \e{arguments} following the mnemonic. In machine code this additional information is encoded in binary form following the opcode.

\c{ADC #42} is an example of an instruction, where \cw{ADC} is the mnemonic identifying the instruction, and \cw{#42} is the argument. This particular instruction, understood by the MOS6502 processor, adds the value 42 to the value stored in processor register A. It then writes the result back to A.

The set of instructions a CPU understands is called \e{instruction set}. There are many different kinds of CPUs and instruction sets. As a result, there is not something like \q{the assembler}, but there are many of them, all adapted to one or more specific instruction sets. ASM6502 is an assembler that is adapted to the instruction set of the MOS6502 processor family.

Beside generating an output file containing machine code, ASM6502 may also generate a \e{listing file} containing a \e{program listing}. This listing shows the lines of the assembler source side-by-side to the generated machine code in hexadecimal notation.

\c FPos  PC    Code          Line# Assembler text
\c 0000  0000  69 2A            1: ADC #42
\c 0002  0002  E8               2: INX

FPos indicates the position of the instructions regarding the output file. PC represents the \e{location} or \e{address} of the code while it is executed.

Let's further elaborate what the arguments to instructions may be. In the example above, \c{#42} is a numeric value that is directly used to do the addition. It is therefore called an \e{immediate} value, and the mode the processor operates in is called \e{immediate addressing} mode. The \c{INX} instruction above implicitly operates on a register called X. For this reason it is called \e{implicit addressing}. Often, the argument specifies a memory location. This memory location may be referenced to the start of the address space. In this case it is called \e{absolute addressing} mode. If the memory location is specified relative to some other location we call it \e{relative addressing} mode. Sometimes one does not want to encode a fixed memory location into the machine instruction, but instead use the content of some memory location as the address to operate on. This is called \e{indirect addressing}.

The sequence of instructions executed by the processor may be altered by the programmer utilizing special machine instructions. Some of these instructions modify this sequence unconditionally, and some alter it if a special condition is met. The instructions are called \e{jump} or \e{branching} instructions. The information of the \e{jump target} is encoded as address within the instruction. The assembler supports the programmer by letting him specify a jump target by giving it a name, called \e{label}. In the introductory example, \c{basic_upstart}, \c{start}, and \c{hello} are labels.

One task of an assembler is to assign an address to every label the programmer defines. Sometimes this is not that easy. For example, a label may be used as a jump target before it is defined in the assembler source. This is called \e{forward-reference}. That is the reason ASM6502 is a so called two-pass assembler. In the first pass, the assembler processes the whole file to determine the addresses of all labels. In the second pass all required information is provided, and the machine code is generated.

Using forward-references can sometimes lead to non-optimal machine code, because the assembler has to guess the size of the forward-referenced \q{thing}. In that case the programmer can support the assembler by giving a hint what type the referenced \q{thing} is. Some \e{multi-pass assemblers} process the source more than two times and can optimize the machine code even in cases they encounter forward-referenced labels. But for the sake of simplicity ASM6502 does not do that.

Beside labels the programmer may also define \e{variables}. Variables may be assigned any kind of mathematical expression. Variables and labels are also called \e{symbols}, and the name identifying them is referred to as \e{identifier}.

Character sequences which by itself provide a value to the assembler, like the character sequence \c{42} that represents the numeric value 42, are considered to be \e{literals}.


\C{syntax}Syntax and Semantics

The following chapter describes the data model and the syntax accepted by the assembler.


\H{input-files}Input Files

Input files should have \cw{.a65} as extension to distinguish it from files written for other assemblers. The files should be encoded in the ASCII or UTF-8 character sets.


\H{data-types}Data Types

Two data types are known to the assembler:

\b \e{byte}: 8-bit in size, storing whole numbers between 0 to 255 inclusive.

\b \e{word}: 16-bit in size, storing positive whole numbers between 0 to 65535. Negative numbers may also be stored in the range from -32768 to -1. Negative numbers are stored in two-complement representation.

There is no distinct boolean type. In a boolean context, any value other than zero is considered to be a boolean true.


\H{symbols}Symbols

The assembler distinguishes two types of case-sensitive symbols: \e{labels} and \e{variables}. A label stores the address of of the instruction or data it is currently assembling. It is defined at the beginning of a line by appending its name with a colon. The colon may be left out if the label name is not an instruction mnemonic.

A variable is defined by assigning an expression to it. In the following example, hello is a label, and CHROUT is a variable.

\c CHROUT = $ffd2
\c hello:  jmp CHROUT

Labels and variables may be of type byte or word. A label is of type byte if it is assigned an address within the first 256 bytes (zero page). Otherwise, it is of type word. The data type of a variable is that of the expression assigned to it, unless it is forward-referenced.

Forward-referenced means that a symbol is used in an expression before it is defined. Forward-referenced symbols are \e{always} of type word, regardless of what is assigned to them.

If a variable is assigned a value multiple times, it must always be the same value. Otherwise, it is an illegal redefinition. Labels may not be defined more than once.

Variables and labels may be defined locally by prepending their name with \cw{@}. They are then associated with the previous non-local label defined. They may be referenced within expressions locally by \cw{@name} or with their qualified name
\cw{label@name} outside their local scope. Example:

\c         jmp hello@l   ; fully qualified label reference
\c hello:
\c   @l    jmp @l        ; local label reference


\H{expressions}Expressions

There are many places where expressions may occur, for example on the right side of a variable definition or as an argument to a machine instruction.

Every expression is either of type byte, word or of unknown type. Every expression also has a defined numeric value or an undefined value.


\S{primitives}Primitive Expressions

The most primitive form of an expression is a numeric constant, which can be given in decimal, hexadecimal, or binary. The value of the constant determines its type.

\c 5     ; decimal byte constant
\c $a    ; hexadecimal byte constant
\c $4711 ; hexadecimal word constant
\c %1011 ; binary byte constant
\c -1    ; word constant $FFFF (2-complement)

A byte-sized value can be forced to be of type word by prepending zeros.

\c $00a  ; hex word constant because more than 2 digits
\c 0123  ; decimal word constant because more than 3 digits

A character enclosed by \cw{'} is evaluated to its ASCII value.

\c 'x'   ; byte typed ASCII character code of x

The address counter symbol \cw{@} returns the address of the currently assembled instruction. The symbol \cw{.?} returns an undefined value of unknown type.

\c .?    ; undefined value
\c @     ; current address

Label and variable names evaluate to their respective value.

\c LOAD_ADDR = 2048
\c lda LOAD_ADDR     ; load memory cell 2048 into accumulator


\S{operators}Operator Precedence

Expressions may be composed of arithmetic sub-expressions. Operator precedence is respected.
	
The supported operations from highest to lowest precedence are:

\b Expressions enclosed by parentheses \cw{()}

\b bit-wise complement \cw{~}, logical negation \cw{!}, and is-defined \cw{?} operators, all unary and right-associative

\b Multiplication \cw{*}, division \cw{/}, bit-wise and \cw{&}, logical left \cw{<<} and right \cw{>>} shift

\b Unary plus and binary addition \cw{+}, unary minus and subtraction \cw{-}, bit-wise or \cw{|}, exclusive or \cw{^}

\b Unary low \cw{<} and high \cw{>} byte select, lossless unary conversion operators \cw{[b]} and \cw{[w]}

\b The comparison operators are \cw{==}, \cw{!=}, \cw{<}, \cw{>}, \cw{<=}, \cw{>=}

\b Logical and \cw{&&}

\b Logical or \cw{||}

\b Defined-or-else \cw{?:}


\S{}Arithmetic and bit-wise Operators

The usual semantics for the arithmetic operators apply.

If there is an undefined argument to one of the arithmetic operators, the result value is undefined. Type inference is performed as such that if any of the arguments is of type word, the result is of type word. The result is also of type word if it would otherwise overflow the range of type byte.

The bit-wise complement operator \cw{~} respects the data type when toggling bits. This means that \cw{~1} becomes \cw{$FE}, and not \cw{$FFFE}.

Examples:

\c 2+3*5        ; value 17
\c $4700 | $11  ; is $4711
\c 255+255      ; of type word because >256


\S{}Byte-select and Conversion Operators

The low-byte select operator \cw{<} returns the low byte of a word-sized expression, or the unmodified value of a byte-sized expression. The high-byte select operator \cw{>} returns the high byte of a word-sized expression shifted eight bits to the right. It returns zero for byte-sized expressions. The resulting data type of both operators is byte. If applied to an undefined argument, the result is undefined.

The convert to byte \cw{[b]} and convert to word \cw{[w]} operators change the data type of their expression. If the expression does not fit into a byte, \cw{[b]} raises an error. The operators also change the type of the undefined value while retaining undefined as a value.


\S{}Comparison and Logical Operators

The comparison operators return 1 as true value, and 0 as false value. They return an undefined value if at least one of their arguments is undefined.

The logical operators return an undefined value if at least one of their arguments is undefined. The logical or \cw{||} operator is an exception to this rule. It returns true if at least one of its arguments is true.

The logical negation operator \cw{!} is right-associative.


\S{}Is-defined Operator

The unary, right associative is-defined operator \cw{?} returns true, if its argument is defined. Otherwise, false is returned. The result is of type byte.


\S{}Defined-or-else Operator

The defined-or-else operator \cw{?:} returns its first argument if it is defined, otherwise its second. It is left-associative.

Example:

\c Y = .?
\c Z = X ?: Y ?: $DEAD  ; assign $DEAD to Z
\c                      ; because X and Y are undefined


\H{line-format}Line Format

A line may either contain a statement or a conditional statement or none of them. A statement it either a variable definition, an instruction or a directive. Instructions and directives may be preceded by a label definition. Also, a label definition may stand for its own. Conditional statements are \cw{.IF}, \cw{.ELSE}, and \cw{.ENDIF}. These may not be preceded by a label. Each line may end with a comment. Comments are started by semicolon and ignored by the assembler.

\c start:              ; line consisting only of a label
\c loop: BNE loop      ; label and instruction
\c msg   .byte "Hello" ; label followed by a directive
\c X = 42              ; variable definition
\c .if X == 42         ; conditional statement


\H{directives}Directives

Directives instruct the assembler to do certain things. They may or may not produce output data. Names of directives start with a dot. The directives currently known to the assembler are:


\S{}.ASSERT and .ASSERT1

Tests if the expression given as argument returns a true value, otherwise terminated with an error. \cw{.ASSERT} runs on pass two, and \cw{ASSERT1} runs on pass one. The arguments following the first one are handled like the \cw{.ECHO} directive does it.

Example:

\c .ASSERT 2 > 1, "arithmetic implementation is flawed"


\S{}.BINARY Directive

Copies binary data from a file to the output file. Numeric expressions specifying a start offset and a length may be given as arguments. If a length is given, the start offset must also be specified.

Example:

 \c .BINARY "SPRITE.DAT".         ; copies the whole file
 \c .BINARY "SPRITE.DAT", $10     ; skip the first 16 bytes
 \c .BINARY "SPRITE.DAT", $10, 64 ; copy 64 bytes from offset 16


\S{}.BYTE Directive

Produces one or more output bytes. The arguments are separated by a comma. Numeric expressions or strings may be used as arguments. The values of numeric expressions must fit into a byte. Strings must be enclosed by \cw{"}.

Example:

\c .BYTE 1
\c .BYTE 47, 11
\c .BYTE "Hello, World", 13, 10


\S{}.ECHO and .ECHO1 Directives

Print the arguments to standard output. \cw{.ECHO} does it on the second assembler pass, while \cw{.ECHO1} does it on the first pass. The arguments may either be strings or numeric expressions, separated by comma. Numeric expressions may be prefixed by the format specifier \cw{[$]} to output the number in hexadecimal format. Otherwise it is printed in decimal.

Example:

\c .ECHO "hexadecimal representation of ", 4711, " is ", [$]4711


\S{}.ERROR directive

Aborts the assembly along with file name and line number information. Accepts the same parameters as \cw{.ECHO} for the error message.


\S{}.FILL Directive

Starting from the current position of the output file, emits as many bytes as given by the first argument. If the second argument is given, the region is filled with its byte-sized value. Otherwise, it is filled with zero. The address counter \cw{@} is increased accordingly.

Example:

\c .FILL 100       ; fill 100 bytes with zero
\c .FILL 16, $EA   ; insert 16 NOPs ($EA) into the code


\S{}.IF, .IFN, .ELSE and .ENDIF Directives

Conditionally assembles code if the condition of the argument to \cw{.IF} or \cw{.IFN} is met. For \cw{.IF}, the condition is met if the argument yields a defined value other than zero. For \cw{.IFN}, the condition is met if the argument does not yield a defined value or the value is zero.

If the condition is met, the code between \cw{.IF} or \cw{.IFN} and \cw{.ELSE} is assembled, or between \cw{.IF} or \cw{.IFN} and \cw{.ENDIF}, if \cw{.ELSE} is not given. If the argument to \cw{.IF} or \cw{.IFN} is not met and \cw{.ELSE} is specified, the code between \cw{.ELSE} and \cw{.ENDIF} is assembled.

\cw{.IF} and \cw{.IFN} treat an undefined expression like a boolean false.

The conditional directives may \e{not} be preceded by a label.

Example:

\c C64 = 1
\c .IF C64
\c   .ECHO "I am assembled for the C64"
\c .ELSE
\c   .ECHO "I am assembled for the PET"
\c .ENDIF

In listing files, the unprocessed lines are indicated by a minus after the line number instead of a colon.


\S{}.IFDEF and .IFNDEF Directives

An argument to \cw{.IFDEF} is considered true, if its value is defined. An argument to \cw{.IFNDEF} is considered true, if its value is undefined. Otherwise, the directives behave like their \cw{.IF} and \cw{.IFN} counterparts.


\S{}.INCLUDE Directive

Substitutes the directive with the contents of a file given by the argument for processing by the assembler.

Example:

\c .INCLUDE "c64prg.i65"


\S{}.LIST and .NOLIST Directives

If a listing file is given via command line, listing generation is initially enabled. If the user wants some parts of the code to be excluded from the listing, the region can be surrounded by \cw{.NOLIST} and \cw{.LIST} statements.

If listing generation is disabled when an \cw{.INCLUDE} statement is processed, \cw{.LIST} inside the included file has no effect.

A \cw{.NOLIST} inside an include file does not propagate to the parent file.


\S{}.ORG Directive

Sets the address counter for the currently processed instruction to the numeric value of the argument. Does not modify the offset into the output file. This means that .ORG can not be used to \q{jump around} in the output file.

Example:

\c .ORG $0801

\S{}.WARNING Directive

Prints a warning along with file name and line number information. Accepts the same parameters as \cw{.ECHO} for the warning message.


\S{}.WORD Directive

Produces one or more output words.

Example:

\c .WORD $0801, 4711


\H{addressing-modes}Addressing Modes

Every assembler instruction consists of a mnemonic identifying the machine instruction followed by at most one numeric argument including addressing mode specifiers. Instruction mnemonics are case-insensitive. The assembler supports all MOS6502 addressing modes:

\S{}Implicit and Accumulator Addressing

Either no argument or accumulator is implicitly assumed by the instruction

\c CLC ; clear carry
\c ROR ; rotate accumulator right

\S{}Immediate Addressing

The byte-sized argument is encoded in the byte following the opcode. The argument for the assembler instruction is prefixed by # to indicate an immediate value. The argument may be any expression yielding a byte-sized numeric value.

\c LDA #42 ; load value 42 into the accumulator

\S{}Relative Addressing

Relative addressing is only used by branch instructions. The branch offset in the range of -128 to 127 is encoded by the byte following the opcode. The assembler interprets the argument, which may be any numeric expression, relative to the current address counter.

\c loop: BNE loop

\S{}Absolute Addressing

A word-sized address is encoded following the opcode byte. The assembler interprets any word-sized expression following an instruction mnemonic as an absolute address.

\c LDA $4711 ; load contents of address $4711 into the accumulator

\S{}Zero-page Addressing

A byte-sized address is encoded following the opcode byte. The assembler interprets any byte-sized expression following an instruction mnemonic as a zero page address.

\c LDA $47   ; load contents of address $47 into the accumulator
\c LDA >$4711  ; load contents of address $47 into the accumulator

\S{}Absolute X and Absolute X Addressing

The address is encoded in the word following the opcode and displaced by the contents for the X or Y register.

\c LDA $4711,X ; load contents of address $4711 displaced by X
\c LDA $4711,Y ; load contents of address $4711 displaced by Y

\S{}Zero-page X and Zero-page Y Addressing

The address is encoded in the byte following the opcode displaced by the contents for the X or Y register.

\c LDA $47,X ; A = contents of address $47 displaced by X
\c LDX $11,Y ; X = load contents of address $47 displaced by Y

\S{}Indirect Addressing

The word-sized address is stored in the memory location given by the word-sized argument. In assembler syntax, an indirect address is indicated by enclosing the argument in parentheses, like in the following.

\c JMP ($4711)

The following one is a syntax error, because the assembler assumes indirect addressing mode instead of a sub-expression grouped by parentheses:

\c JMP (2+3)*1000

To correct this, you may rewrite it as:

\c JMP +(2+3)*1000

This one is correct (indirect addressing):

\c JMP ((2+3)*1000)

\S{}Indexed Indirect by X and Indirect Indexed by Y Addressing

Indirect indirect by X addresses the byte referenced by the contents of the word stored at zero page address b + X. Indirect indexed by Y adds Y to the address word stored in zero page address b to calculate the address to operate on.

\c b = 15
\c ORA (b,X)
\c ORA (b),Y

\A{usage}Command Line Syntax

\c Usage: asm6502 [-q] input -o output [-l listing] [VAR=number]...
\c 
\c   -q             be quiet, unless an error occured
\c   -o output      set output file name
\c   -l listing     set optional listing file name

Variables defined from the command line are known to the assembler when assembling files. The numbers are parsed like number literals in the source code.

\A{instruction-ref}Instruction Reference

In the following instruction list, \cw{#$42} is a representative for a byte-sized immediate value. This value may be substituted by any other byte-sized value. \cw{$15} is a representative for a zero-page memory address, and \cw{$4711} is a representative for a word-sized memory address.

The first hexadecimal value on a line is the instruction opcode followed by at most two bytes of additional data defined by the instruction argument. The syntax of the different addressing modes is described in one of the previous chapters.

\H{adc}ADC - add with carry

Flags: N Z C V

\c 69 42      adc #$42
\c 65 15      adc $15
\c 75 15      adc $15,x
\c 6D 11 47   adc $4711
\c 7D 11 47   adc $4711,x
\c 79 11 47   adc $4711,y
\c 61 15      adc ($15,x)
\c 71 15      adc ($15),y

\H{and}AND - bit-wise and with accumulator

Flags: N Z

\c 29 42      and #$42
\c 25 15      and $15
\c 35 15      and $15,x
\c 2D 11 47   and $4711
\c 3D 11 47   and $4711,x
\c 39 11 47   and $4711,y
\c 21 15      and ($15,x)
\c 31 15      and ($15),y

\H{asl}ASL - arithmetic shift left

Flags: N Z C

\c 0A         asl
\c 06 15      asl $15
\c 16 15      asl $15,x
\c 0E 11 47   asl $4711
\c 1E 11 47   asl $4711,x

\H{bcc}BCC - branch if carry cleared

\c 90 FE      bcc @

\H{bcs}BCS - branch if carry set

\c B0 FE      bcs @

\H{beq}BEQ - branch if equal

\c F0 FE      beq @

\H{bit}BIT - test bits

Negative flag becomes the bit 7 of the operand, overflow flag becomes bit 6 of the operand. Zero flag is set if the bit-wise and operation between the accumulator and the operand is zero, otherwise it is cleared.

Flags: N Z V

\c 24 15      bit $15
\c 2C 11 47   bit $4711

\H{bmi}BMI - branch if negative

\c 30 FE      bmi @

\H{bne}BNE - branch if not equal

\c D0 FE      bne @

\H{bpl}BPL - branch if positive

\c 10 FE      bpl @

\H{brk}BRK - force break

BRK cannot be masked by setting interrupt disable flag. Forces the processor to continue at the address stored in the IRQ vector $FFFE. Pushes the flags with set break (B) flag to differentiate from a hardware interrupt. RTI and PLP ignore the break flag.

Flags: I=1

\c 00         brk

\H{bvc}BVC - branch if overflow flag cleared

\c 50 FE      bvc @

\H{bvs}BVS - branch if overflow flag set

\c 70 FE      bvs @
          
\H{clc}CLC - clear carry flag

Flags: C=0

\c 18         clc

\H{cld}CLD - clear decimal flag

Flags: D=0

\c D8         cld

\H{cli}CLI - clear interrupt disable flag

Flags: I=0

\c 58         cli

\H{clv}CLV - clear overflow flag

Flags: V=0

\c B8         clv

\H{cmp}CMP - compare with accumulator

Flags: N Z C

\c C9 42      cmp #$42
\c C5 15      cmp $15
\c D5 15      cmp $15,x
\c CD 11 47   cmp $4711
\c DD 11 47   cmp $4711,x
\c D9 11 47   cmp $4711,y
\c C1 15      cmp ($15,x)
\c D1 15      cmp ($15),y

\H{cpx}CPX - compare with X register

Flags: N Z C

\c E0 42      cpx #$42
\c E4 15      cpx $15
\c EC 11 47   cpx $4711

\H{cpy}CPY - compare with Y register

Flags: N Z C

\c C0 42      cpy #$42
\c C4 15      cpy $15
\c CC 11 47   cpy $4711

\H{dec}DEC - decrement

Flags: N Z

\c C6 15      dec $15
\c D6 15      dec $15,x
\c CE 11 47   dec $4711
\c DE 11 47   dec $4711,x

\H{dex}DEX - decrement X register

Flags: N Z

\c CA         dex

\H{dey}DEY - decrement Y register

Flags: N Z

\c 88         dey

\H{eor}EOR - exclusive or

Flags: N Z

\c 49 42      eor #$42
\c 45 15      eor $15
\c 55 15      eor $15,x
\c 4D 11 47   eor $4711
\c 5D 11 47   eor $4711,x
\c 59 11 47   eor $4711,y
\c 41 15      eor ($15,x)
\c 51 15      eor ($15),y

\H{inc}INC - increment

Flags: N Z

\c E6 15      inc $15
\c F6 15      inc $15,x
\c EE 11 47   inc $4711
\c FE 11 47   inc $4711,x

\H{inx}INX - increment X register

Flags: N Z

\c E8         inx

\H{iny}INY - increment Y register

Flags: N Z

\c C8         iny

\H{jmp}JMP - jump

\c 4C 11 47   jmp $4711
\c 6C 11 47   jmp ($4711)

\H{jsr}JSR - call subroutine

\c 20 11 47   jsr $4711

\H{lda}LDA - load accumulator

Flags: N Z

\c A9 42      lda #$42
\c A5 15      lda $15
\c B5 15      lda $15,x
\c AD 11 47   lda $4711
\c BD 11 47   lda $4711,x
\c B9 11 47   lda $4711,y
\c A1 15      lda ($15,x)
\c B1 15      lda ($15),y

\H{ldx}LDX - load X register

Flags: N Z

\c A2 42      ldx #$42
\c A6 15      ldx $15
\c B6 15      ldx $15,y
\c AE 11 47   ldx $4711
\c BE 11 47   ldx $4711,y

\H{ldy}LDY - load Y register

Flags: N Z

\c A0 42      ldy #$42
\c A4 15      ldy $15
\c B4 15      ldy $15,x
\c AC 11 47   ldy $4711
\c BC 11 47   ldy $4711,x

\H{lsr}LSR - logical shift right

Flags: N=0 Z C

\c 4A         lsr
\c 46 15      lsr $15
\c 56 15      lsr $15,x
\c 4E 11 47   lsr $4711
\c 5E 11 47   lsr $4711,x

\H{nop}NOP - no-operation

\c EA         nop

\H{ora}ORA - bit-wise or with accumulator

Flags: N Z

\c 09 42      ora #$42
\c 05 15      ora $15
\c 15 15      ora $15,x
\c 0D 11 47   ora $4711
\c 1D 11 47   ora $4711,x
\c 19 11 47   ora $4711,y
\c 01 15      ora ($15,x)
\c 11 15      ora ($15),y

\H{pha}PHA - push accumulator on stack

\c 48         pha

\H{php}PHP - push flags on stack

\c 08         php

\H{pla}PLA - pop accumulator from stack

Flags: N Z

\c 68         pla

\H{plp}PLP - pop flags from stack

Flags: N Z C I D V

\c 28         plp

\H{rol}ROL - rotate left through carry

Flags: N Z C

\c 2A         rol
\c 26 15      rol $15
\c 36 15      rol $15,x
\c 2E 11 47   rol $4711
\c 3E 11 47   rol $4711,x

\H{ror}ROR - rotate right through carry

Flags: N Z C

\c 6A         ror
\c 66 15      ror $15
\c 76 15      ror $15,x
\c 6E 11 47   ror $4711
\c 7E 11 47   ror $4711,x

\H{rti}RTI - return from interrupt

Flags: N Z C I D V

\c 40         rti

\H{rts}RTS - return from subroutine

\c 60         rts

\H{sbc}SBC - subtract from accumulator with carry

Flags: N Z C V

\c E9 42      sbc #$42
\c E5 15      sbc $15
\c F5 15      sbc $15,x
\c ED 11 47   sbc $4711
\c FD 11 47   sbc $4711,x
\c F9 11 47   sbc $4711,y
\c E1 15      sbc ($15,x)
\c F1 15      sbc ($15),y

\H{sec}SEC - set carry flag

Flags: C=1

\c 38         sec

\H{sed}SED - set decimal flag

Flags: D=1

\c F8         sed

\H{sei}SEI - set interrupt disable flag

Flags: I=1

\c 78         sei

\H{sta}STA - store accumulator

\c 85 15      sta $15
\c 95 15      sta $15,x
\c 8D 11 47   sta $4711
\c 9D 11 47   sta $4711,x
\c 99 11 47   sta $4711,y
\c 81 15      sta ($15,x)
\c 91 15      sta ($15),y

\H{stx}STX - store X register

\c 86 15      stx $15
\c 96 15      stx $15,y
\c 8E 11 47   stx $4711

\H{sty}STY - store Y register

\c 84 15      sty $15
\c 94 15      sty $15,x
\c 8C 11 47   sty $4711

\H{tax}TAX - transfer X to accumulator

\c AA         tax

Flags: N Z

\H{tay}TAY - transfer Y to accumulator

\c A8         tay

Flags: N Z

\H{tsx}TSX - transfer X to stack pointer

Flags: N Z

\c BA         tsx

\H{txa}TXA - transfer accumulator to X

Flags: N Z

\c 8A         txa

\H{txs}TXS - transfer stack pointer to X

Flags: N Z

\c 9A         txs

\H{tya}TYA - transfer accumulator to Y

Flags: N Z

\c 98         tya
